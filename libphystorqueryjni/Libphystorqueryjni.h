/*!
 *  \author    Jichan (development@jc-lab.net)
 *  \version   1.0
 *  \date      2018.10
 *  \copyright Apache License 2.0
 */

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class kr_jclab_javautils_physicalstoragequery_internal_Libphystorqueryjni */

#ifndef _Included_kr_jclab_javautils_physicalstoragequery_internal_Libphystorqueryjni
#define _Included_kr_jclab_javautils_physicalstoragequery_internal_Libphystorqueryjni
#ifdef __cplusplus
extern "C" {
#endif
	/*
	* Class:     kr_jclab_javautils_physicalstoragequery_internal_Libphystorqueryjni
	* Method:    freeObject
	* Signature: (J)V
	*/
	JNIEXPORT void JNICALL Java_kr_jclab_javautils_physicalstoragequery_internal_Libphystorqueryjni_freeObject
	(JNIEnv *, jobject, jlong);

	/*
	* Class:     kr_jclab_javautils_physicalstoragequery_internal_Libphystorqueryjni
	* Method:    getVolumeList
	* Signature: ()J
	*/
	JNIEXPORT jlong JNICALL Java_kr_jclab_javautils_physicalstoragequery_internal_Libphystorqueryjni_getVolumeList
	(JNIEnv *, jobject);

	/*
	* Class:     kr_jclab_javautils_physicalstoragequery_internal_Libphystorqueryjni
	* Method:    getVolumeListCount
	* Signature: (J)I
	*/
	JNIEXPORT jint JNICALL Java_kr_jclab_javautils_physicalstoragequery_internal_Libphystorqueryjni_getVolumeListCount
	(JNIEnv *, jobject, jlong);

	/*
	* Class:     kr_jclab_javautils_physicalstoragequery_internal_Libphystorqueryjni
	* Method:    getVolumePhyDeviceName
	* Signature: (JI)Ljava/lang/String;
	*/
	JNIEXPORT jstring JNICALL Java_kr_jclab_javautils_physicalstoragequery_internal_Libphystorqueryjni_getVolumePhyDeviceName
	(JNIEnv *, jobject, jlong, jint);

	/*
	* Class:     kr_jclab_javautils_physicalstoragequery_internal_Libphystorqueryjni
	* Method:    getVolumeMountPath
	* Signature: (JI)Ljava/lang/String;
	*/
	JNIEXPORT jstring JNICALL Java_kr_jclab_javautils_physicalstoragequery_internal_Libphystorqueryjni_getVolumeMountPath
	(JNIEnv *, jobject, jlong, jint);

	/*
	* Class:     kr_jclab_javautils_physicalstoragequery_internal_Libphystorqueryjni
	* Method:    openPhyDevice
	* Signature: (Ljava/lang/String;)J
	*/
	JNIEXPORT jlong JNICALL Java_kr_jclab_javautils_physicalstoragequery_internal_Libphystorqueryjni_openPhyDevice
	(JNIEnv *, jobject, jstring);

	/*
	* Class:     kr_jclab_javautils_physicalstoragequery_internal_Libphystorqueryjni
	* Method:    getPhyDeviceVendorName
	* Signature: (J)Ljava/lang/String;
	*/
	JNIEXPORT jstring JNICALL Java_kr_jclab_javautils_physicalstoragequery_internal_Libphystorqueryjni_getPhyDeviceVendorName
	(JNIEnv *, jobject, jlong);

	/*
	* Class:     kr_jclab_javautils_physicalstoragequery_internal_Libphystorqueryjni
	* Method:    getPhyDeviceProductName
	* Signature: (J)Ljava/lang/String;
	*/
	JNIEXPORT jstring JNICALL Java_kr_jclab_javautils_physicalstoragequery_internal_Libphystorqueryjni_getPhyDeviceProductName
	(JNIEnv *, jobject, jlong);

	/*
	* Class:     kr_jclab_javautils_physicalstoragequery_internal_Libphystorqueryjni
	* Method:    getPhyDeviceSerialNumber
	* Signature: (J)Ljava/lang/String;
	*/
	JNIEXPORT jstring JNICALL Java_kr_jclab_javautils_physicalstoragequery_internal_Libphystorqueryjni_getPhyDeviceSerialNumber
	(JNIEnv *, jobject, jlong);

#ifdef __cplusplus
}
#endif
#endif
